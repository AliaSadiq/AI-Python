class ElectricMountainRailway:
    def __init__(self):
        self.up_trips = ["09:00", "11:00", "13:00", "15:00"]
        self.down_trips = ["10:00", "12:00", "14:00", "16:00"]
        self.total_passengers_up = [0] * 4
        self.total_passengers_down = [0] * 4
        self.total_money_up = [0] * 4
        self.total_money_down = [0] * 4
        self.ticket_price = 25

    def display_screen(self):
        print("\nElectric Mountain Railway - Start of the Day")
        print("===========================================")
        print("Trip\tDeparture\tReturn\t\tAvailable Seats")
        print("------------------------------------------------")

        for i in range(4):
            available_seats_up = 80 - self.total_passengers_up[i]
            available_seats_down = 80 - self.total_passengers_down[i]

            if available_seats_up > 0:
                print(f"{i + 1}.\t{self.up_trips[i]}\t\t{self.down_trips[i]}\t\t{available_seats_up}")
            else:
                print(f"{i + 1}.\t{self.up_trips[i]}\t\t{self.down_trips[i]}\t\tClosed")

    def book_ticket(self):
        trip_type = input("\nEnter trip type (up/down): ").lower()
        trip_number = int(input("Enter trip number (1-4): "))
        num_passengers = int(input("Enter number of passengers: "))

        if trip_type == "up":
            if self.check_availability(trip_type, trip_number, num_passengers):
                self.total_passengers_up[trip_number - 1] += num_passengers
                self.total_money_up[trip_number - 1] += self.calculate_ticket_cost(num_passengers)
                print("Tickets booked successfully!")
            else:
                print("Not enough seats available.")
        elif trip_type == "down":
            if self.check_availability(trip_type, trip_number, num_passengers):
                self.total_passengers_down[trip_number - 1] += num_passengers
                self.total_money_down[trip_number - 1] += self.calculate_ticket_cost(num_passengers)
                print("Tickets booked successfully!")
            else:
                print("Not enough seats available.")

    def check_availability(self, trip_type, trip_number, num_passengers):
        if trip_type == "up":
            available_seats = 80 - self.total_passengers_up[trip_number - 1]
        elif trip_type == "down":
            available_seats = 80 - self.total_passengers_down[trip_number - 1]

        return available_seats >= num_passengers

    def calculate_ticket_cost(self, num_passengers):
        free_tickets = num_passengers // 10
        total_cost = (num_passengers - free_tickets) * self.ticket_price
        return total_cost

    def update_display(self):
        print("\nUpdated Display:")
        print("=================")
        print("Trip\tDeparture\tReturn\t\tAvailable Seats")
        print("------------------------------------------------")

        for i in range(4):
            available_seats_up = 80 - self.total_passengers_up[i]
            available_seats_down = 80 - self.total_passengers_down[i]

            if available_seats_up > 0:
                print(f"{i + 1}.\t{self.up_trips[i]}\t\t{self.down_trips[i]}\t\t{available_seats_up}")
            else:
                print(f"{i + 1}.\t{self.up_trips[i]}\t\t{self.down_trips[i]}\t\tClosed")

    def end_of_day_report(self):
        print("\nEnd of the Day Report:")
        print("=======================")

        for i in range(4):
            total_passengers = self.total_passengers_up[i] + self.total_passengers_down[i]
            total_money = self.total_money_up[i] + self.total_money_down[i]

            print(f"\nTrip {i + 1} - {self.up_trips[i]} to {self.down_trips[i]}:")
            print(f"Total Passengers: {total_passengers}")
            print(f"Total Money: ${total_money}")

        total_passengers_day = sum(self.total_passengers_up) + sum(self.total_passengers_down)
        total_money_day = sum(self.total_money_up) + sum(self.total_money_down)

        print("\nOverall Totals for the Day:")
        print("===========================")
        print(f"Total Passengers for the Day: {total_passengers_day}")
        print(f"Total Money for the Day: ${total_money_day}")

        most_passengers_trip = self.up_trips[self.total_passengers_up.index(max(self.total_passengers_up))]
        print(f"\nTrain Journey with the Most Passengers: {most_passengers_trip}")


# Main Program
railway = ElectricMountainRailway()
railway.display_screen()

for _ in range(2):  # Let's assume two bookings for testing
    railway.book_ticket()

railway.update_display()
railway.end_of_day_report()
