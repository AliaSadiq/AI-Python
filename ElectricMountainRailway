class ElectricMountainRailway:
    def __init__(self):
        self.journeys = {
            '09:00': {'up': 0, 'down': 0, 'up_money': 0, 'down_money': 0},
            '11:00': {'up': 0, 'down': 0, 'up_money': 0, 'down_money': 0},
            '13:00': {'up': 0, 'down': 0, 'up_money': 0, 'down_money': 0},
            '15:00': {'up': 0, 'down': 0, 'up_money': 0, 'down_money': 0},
        }
        self.seats_per_coach = 80
        self.ticket_price = 25
        self.group_discount_threshold = 10

    def display_screen(self):
        print("Train Times\tAvailable Seats")
        for time, data in self.journeys.items():
            if data['up'] > 0:
                print(f"{time} - Up: {self.available_seats(data['up'])}\tDown: {self.available_seats(data['down'])}")
            else:
                print(f"{time} - Closed")

    def available_seats(self, booked_seats):
        remaining_seats = self.seats_per_coach * 6 - booked_seats
        return "Closed" if remaining_seats == 0 else remaining_seats

    def purchase_tickets(self, time, num_tickets):
        journey = self.journeys[time]
        total_price = num_tickets * self.ticket_price

        if journey['up'] + num_tickets <= self.seats_per_coach * 6 and journey['down'] + num_tickets <= self.seats_per_coach * 6:
            journey['up'] += num_tickets
            journey['down'] += num_tickets

            if num_tickets >= self.group_discount_threshold:
                free_tickets = num_tickets // self.group_discount_threshold
                total_price -= free_tickets * self.ticket_price

            journey['up_money'] += total_price
            journey['down_money'] += total_price

            print(f"Tickets purchased successfully for {num_tickets} passengers at {time}. Total cost: ${total_price}")

            return True
        else:
            print(f"Tickets not available for {num_tickets} passengers at {time}.")
            return False

    def end_of_day_summary(self):
        total_passengers = 0
        total_money = 0
        max_passengers = 0
        max_journey = ''

        print("\nEnd of Day Summary:")
        for time, data in self.journeys.items():
            total_passengers += data['up'] + data['down']
            total_money += data['up_money'] + data['down_money']

            if data['up'] + data['down'] > max_passengers:
                max_passengers = data['up'] + data['down']
                max_journey = time

            print(f"{time} - Passengers: {data['up'] + data['down']}, Revenue: ${data['up_money'] + data['down_money']}")

        print("\nTotal Passengers: ", total_passengers)
        print("Total Revenue: $", total_money)
        print(f"Most popular journey: {max_journey} with {max_passengers} passengers")


# Task 1 - Start of the day
railway = ElectricMountainRailway()
railway.display_screen()

# Task 2 - Purchasing tickets
railway.purchase_tickets('09:00', 15)
railway.purchase_tickets('11:00', 8)
railway.purchase_tickets('13:00', 25)
railway.display_screen()

# Task 3 - End of the day
railway.end_of_day_summary()
